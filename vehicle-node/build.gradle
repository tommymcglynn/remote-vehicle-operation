group 'com.mcglynn'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile project(':data')
    compile project(':shared')
    compile 'com.pi4j:pi4j-core:1.2'
    compile 'org.pushing-pixels:radiance-trident:1.0.2'
    compile 'net.bramp.ffmpeg:ffmpeg:0.6.2'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.mcglynn.rvo.vehicle.CarNodeApplication'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def home = System.getenv("HOME")
def vehicleHost = '192.168.1.25'
def vehicleHome = '/home/vehicle'
def vehicleAppDir = "${vehicleHome}/vehicle-node"
def serviceScriptName = 'vehicle-node.sh'

remotes {
    pi {
        host = vehicleHost
        user = 'vehicle'
        identity = file("${home}/.ssh/vehicle_id_rsa")
        agent = true
    }
}

task('deployRunScript') {
    group 'Vehicle'
    description 'Deploy shell script necessary for starting and stopping the vehicle server.'
    doLast {
        ssh.run {
            session(remotes.pi) {
                execute "mkdir -p ${vehicleAppDir}"
                put from: file("src/main/sh/${serviceScriptName}"), into: vehicleAppDir
                execute "chmod 744 ${vehicleAppDir}/${serviceScriptName}"
            }
        }
    }
}

task('deploy') {
    group 'Vehicle'
    description 'Compiles jar and uses SSH to copy jar to the remote vehicle at $vehicleHost. Will also restart the vehicle server.'
    dependsOn 'jar', 'deployRunScript'
    doLast {
        ssh.run {
            session(remotes.pi) {
                put from: jar.archivePath, into: vehicleAppDir
                execute "cd ${vehicleAppDir}"
                execute "${vehicleAppDir}/${serviceScriptName} stop"
                execute "${vehicleAppDir}/${serviceScriptName} start"
            }
        }
    }
}

task('stopServer') {
    group 'Vehicle'
    description 'Stop the remote vehicle server.'
    dependsOn 'deployRunScript'
    doLast {
        ssh.run {
            session(remotes.pi) {
                execute "${vehicleAppDir}/${serviceScriptName} stop"
            }
        }
    }
}

task('startServer') {
    group 'Vehicle'
    description 'Start the remote vehicle server.'
    dependsOn 'deployRunScript'
    doLast {
        ssh.run {
            session(remotes.pi) {
                execute "${vehicleAppDir}/${serviceScriptName} start"
            }
        }
    }
}

task('restartServer') {
    group 'Vehicle'
    description 'Restart the remote vehicle server.'
    dependsOn 'deployRunScript'
    doLast {
        ssh.run {
            session(remotes.pi) {
                execute "${vehicleAppDir}/${serviceScriptName} stop"
                execute "${vehicleAppDir}/${serviceScriptName} start"
            }
        }
    }
}